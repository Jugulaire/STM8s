                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uart_init
                                     12 	.globl _uart_write
                                     13 	.globl _uart_read
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 
                                     27 ; default segment ordering for linker
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area CONST
                                     32 	.area INITIALIZER
                                     33 	.area CODE
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area CODE
                                     51 ;	../../lib/uart.c: 4: void uart_init() {
                                     52 ;	-----------------------------------------
                                     53 ;	 function uart_init
                                     54 ;	-----------------------------------------
      000000                         55 _uart_init:
                                     56 ;	../../lib/uart.c: 8: UART1_BRR2 = ((div >> 8) & 0xF0) + (div & 0x0F);
      000000 4F               [ 1]   57 	clr	a
      000001 97               [ 1]   58 	ld	xl, a
      000002 A6 11            [ 1]   59 	ld	a, #0x11
      000004 A4 0F            [ 1]   60 	and	a, #0x0f
      000006 89               [ 2]   61 	pushw	x
      000007 1B 02            [ 1]   62 	add	a, (2, sp)
      000009 85               [ 2]   63 	popw	x
      00000A C7 52 33         [ 1]   64 	ld	0x5233, a
                                     65 ;	../../lib/uart.c: 9: UART1_BRR1 = div >> 4;
      00000D A6 01            [ 1]   66 	ld	a, #0x01
      00000F C7 52 32         [ 1]   67 	ld	0x5232, a
                                     68 ;	../../lib/uart.c: 11: UART1_CR2 = (1 << UART1_CR2_TEN) | (1 << UART1_CR2_REN);
      000012 35 0C 52 35      [ 1]   69 	mov	0x5235+0, #0x0c
                                     70 ;	../../lib/uart.c: 12: }
      000016 81               [ 4]   71 	ret
                                     72 ;	../../lib/uart.c: 14: void uart_write(uint8_t data) {
                                     73 ;	-----------------------------------------
                                     74 ;	 function uart_write
                                     75 ;	-----------------------------------------
      000017                         76 _uart_write:
                                     77 ;	../../lib/uart.c: 15: UART1_DR = data;
      000017 C7 52 31         [ 1]   78 	ld	0x5231, a
                                     79 ;	../../lib/uart.c: 16: while (!(UART1_SR & (1 << UART1_SR_TC)));
      00001A                         80 00101$:
      00001A 72 0D 52 30 FB   [ 2]   81 	btjf	0x5230, #6, 00101$
                                     82 ;	../../lib/uart.c: 17: }
      00001F 81               [ 4]   83 	ret
                                     84 ;	../../lib/uart.c: 19: uint8_t uart_read() {
                                     85 ;	-----------------------------------------
                                     86 ;	 function uart_read
                                     87 ;	-----------------------------------------
      000020                         88 _uart_read:
                                     89 ;	../../lib/uart.c: 20: while (!(UART1_SR & (1 << UART1_SR_RXNE)));
      000020                         90 00101$:
      000020 72 0B 52 30 FB   [ 2]   91 	btjf	0x5230, #5, 00101$
                                     92 ;	../../lib/uart.c: 21: return UART1_DR;
      000025 C6 52 31         [ 1]   93 	ld	a, 0x5231
                                     94 ;	../../lib/uart.c: 22: }
      000028 81               [ 4]   95 	ret
                                     96 	.area CODE
                                     97 	.area CONST
                                     98 	.area INITIALIZER
                                     99 	.area CABS (ABS)

                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module test
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _shift_register_send
                                     13 	.globl _shift_register_init
                                     14 	.globl _delay_ms
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; Stack segment in internal ram
                                     25 ;--------------------------------------------------------
                                     26 	.area	SSEG
      000000                         27 __start__stack:
      000000                         28 	.ds	1
                                     29 
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 
                                     35 ; default segment ordering for linker
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area CONST
                                     40 	.area INITIALIZER
                                     41 	.area CODE
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; interrupt vector
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
      000000                         47 __interrupt_vect:
      000000 82v00u00u00             48 	int s_GSINIT ; reset
                                     49 ;--------------------------------------------------------
                                     50 ; global & static initialisations
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
                                     53 	.area GSINIT
                                     54 	.area GSFINAL
                                     55 	.area GSINIT
      000000                         56 __sdcc_init_data:
                                     57 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   58 	ldw x, #l_DATA
      000003 27 07            [ 1]   59 	jreq	00002$
      000005                         60 00001$:
      000005 72 4FuFFuFF      [ 1]   61 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   62 	decw x
      00000A 26 F9            [ 1]   63 	jrne	00001$
      00000C                         64 00002$:
      00000C AEr00r00         [ 2]   65 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   66 	jreq	00004$
      000011                         67 00003$:
      000011 D6uFFuFF         [ 1]   68 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   69 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   70 	decw	x
      000018 26 F7            [ 1]   71 	jrne	00003$
      00001A                         72 00004$:
                                     73 ; stm8_genXINIT() end
                                     74 	.area GSFINAL
      000000 CCr00r04         [ 2]   75 	jp	__sdcc_program_startup
                                     76 ;--------------------------------------------------------
                                     77 ; Home
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME
                                     80 	.area HOME
      000004                         81 __sdcc_program_startup:
      000004 CCr00rDA         [ 2]   82 	jp	_main
                                     83 ;	return from main will return to caller
                                     84 ;--------------------------------------------------------
                                     85 ; code
                                     86 ;--------------------------------------------------------
                                     87 	.area CODE
                                     88 ;	test.c: 5: void delay_ms(uint16_t ms) {
                                     89 ;	-----------------------------------------
                                     90 ;	 function delay_ms
                                     91 ;	-----------------------------------------
      000000                         92 _delay_ms:
      000000 52 06            [ 2]   93 	sub	sp, #6
      000002 1F 03            [ 2]   94 	ldw	(0x03, sp), x
                                     95 ;	test.c: 6: for (uint16_t i = 0; i < ms * 1000; i++)
      000004 5F               [ 1]   96 	clrw	x
      000005 1F 05            [ 2]   97 	ldw	(0x05, sp), x
      000007                         98 00103$:
      000007 1E 03            [ 2]   99 	ldw	x, (0x03, sp)
      000009 89               [ 2]  100 	pushw	x
      00000A AE 03 E8         [ 2]  101 	ldw	x, #0x03e8
      00000D CDr00r00         [ 4]  102 	call	__mulint
      000010 1F 01            [ 2]  103 	ldw	(0x01, sp), x
      000012 1E 05            [ 2]  104 	ldw	x, (0x05, sp)
      000014 13 01            [ 2]  105 	cpw	x, (0x01, sp)
      000016 24 08            [ 1]  106 	jrnc	00105$
                                    107 ;	test.c: 7: __asm__("nop");
      000018 9D               [ 1]  108 	nop
                                    109 ;	test.c: 6: for (uint16_t i = 0; i < ms * 1000; i++)
      000019 1E 05            [ 2]  110 	ldw	x, (0x05, sp)
      00001B 5C               [ 1]  111 	incw	x
      00001C 1F 05            [ 2]  112 	ldw	(0x05, sp), x
      00001E 20 E7            [ 2]  113 	jra	00103$
      000020                        114 00105$:
                                    115 ;	test.c: 8: }
      000020 5B 06            [ 2]  116 	addw	sp, #6
      000022 81               [ 4]  117 	ret
                                    118 ;	test.c: 10: void shift_register_init(void) {
                                    119 ;	-----------------------------------------
                                    120 ;	 function shift_register_init
                                    121 ;	-----------------------------------------
      000023                        122 _shift_register_init:
                                    123 ;	test.c: 11: PA_DDR |= (1 << 1) | (1 << 2) | (1 << 3);  // PA1, PA2, PA3 = output
      000023 C6 50 02         [ 1]  124 	ld	a, 0x5002
      000026 AA 0E            [ 1]  125 	or	a, #0x0e
      000028 C7 50 02         [ 1]  126 	ld	0x5002, a
                                    127 ;	test.c: 12: PA_CR1 |= (1 << 1) | (1 << 2) | (1 << 3);  // push-pull
      00002B C6 50 03         [ 1]  128 	ld	a, 0x5003
      00002E AA 0E            [ 1]  129 	or	a, #0x0e
      000030 C7 50 03         [ 1]  130 	ld	0x5003, a
                                    131 ;	test.c: 13: PA_ODR &= ~((1 << 1) | (1 << 2) | (1 << 3)); // start low
      000033 C6 50 00         [ 1]  132 	ld	a, 0x5000
      000036 A4 F1            [ 1]  133 	and	a, #0xf1
      000038 C7 50 00         [ 1]  134 	ld	0x5000, a
                                    135 ;	test.c: 14: }
      00003B 81               [ 4]  136 	ret
                                    137 ;	test.c: 16: void shift_register_send(uint8_t segments, uint8_t digits) {
                                    138 ;	-----------------------------------------
                                    139 ;	 function shift_register_send
                                    140 ;	-----------------------------------------
      00003C                        141 _shift_register_send:
      00003C 52 07            [ 2]  142 	sub	sp, #7
      00003E 6B 07            [ 1]  143 	ld	(0x07, sp), a
                                    144 ;	test.c: 18: for (int8_t i = 7; i >= 0; i--) {
      000040 A6 07            [ 1]  145 	ld	a, #0x07
      000042 6B 06            [ 1]  146 	ld	(0x06, sp), a
      000044                        147 00110$:
      000044 0D 06            [ 1]  148 	tnz	(0x06, sp)
      000046 2B 3C            [ 1]  149 	jrmi	00104$
                                    150 ;	test.c: 19: if (segments & (1 << i)) PA_ODR |= (1 << 3);
      000048 7B 06            [ 1]  151 	ld	a, (0x06, sp)
      00004A 5F               [ 1]  152 	clrw	x
      00004B 5C               [ 1]  153 	incw	x
      00004C 4D               [ 1]  154 	tnz	a
      00004D 27 04            [ 1]  155 	jreq	00151$
      00004F                        156 00150$:
      00004F 58               [ 2]  157 	sllw	x
      000050 4A               [ 1]  158 	dec	a
      000051 26 FC            [ 1]  159 	jrne	00150$
      000053                        160 00151$:
      000053 7B 07            [ 1]  161 	ld	a, (0x07, sp)
      000055 6B 03            [ 1]  162 	ld	(0x03, sp), a
      000057 0F 02            [ 1]  163 	clr	(0x02, sp)
      000059 C6 50 00         [ 1]  164 	ld	a, 0x5000
      00005C 88               [ 1]  165 	push	a
      00005D 9F               [ 1]  166 	ld	a, xl
      00005E 14 04            [ 1]  167 	and	a, (0x04, sp)
      000060 6B 06            [ 1]  168 	ld	(0x06, sp), a
      000062 9E               [ 1]  169 	ld	a, xh
      000063 14 03            [ 1]  170 	and	a, (0x03, sp)
      000065 6B 05            [ 1]  171 	ld	(0x05, sp), a
      000067 84               [ 1]  172 	pop	a
      000068 1E 04            [ 2]  173 	ldw	x, (0x04, sp)
      00006A 27 07            [ 1]  174 	jreq	00102$
      00006C AA 08            [ 1]  175 	or	a, #0x08
      00006E C7 50 00         [ 1]  176 	ld	0x5000, a
      000071 20 05            [ 2]  177 	jra	00103$
      000073                        178 00102$:
                                    179 ;	test.c: 20: else                     PA_ODR &= ~(1 << 3);
      000073 A4 F7            [ 1]  180 	and	a, #0xf7
      000075 C7 50 00         [ 1]  181 	ld	0x5000, a
      000078                        182 00103$:
                                    183 ;	test.c: 21: PA_ODR |= (1 << 1); PA_ODR &= ~(1 << 1);
      000078 72 12 50 00      [ 1]  184 	bset	0x5000, #1
      00007C 72 13 50 00      [ 1]  185 	bres	0x5000, #1
                                    186 ;	test.c: 18: for (int8_t i = 7; i >= 0; i--) {
      000080 0A 06            [ 1]  187 	dec	(0x06, sp)
      000082 20 C0            [ 2]  188 	jra	00110$
      000084                        189 00104$:
                                    190 ;	test.c: 25: for (int8_t i = 7; i >= 0; i--) {
      000084 A6 07            [ 1]  191 	ld	a, #0x07
      000086 97               [ 1]  192 	ld	xl, a
      000087                        193 00113$:
                                    194 ;	test.c: 19: if (segments & (1 << i)) PA_ODR |= (1 << 3);
      000087 C6 50 00         [ 1]  195 	ld	a, 0x5000
      00008A 95               [ 1]  196 	ld	xh, a
                                    197 ;	test.c: 25: for (int8_t i = 7; i >= 0; i--) {
      00008B 9F               [ 1]  198 	ld	a, xl
      00008C 4D               [ 1]  199 	tnz	a
      00008D 2B 3C            [ 1]  200 	jrmi	00108$
                                    201 ;	test.c: 26: if (digits & (1 << i)) PA_ODR |= (1 << 3);
      00008F 9F               [ 1]  202 	ld	a, xl
      000090 90 AE 00 01      [ 2]  203 	ldw	y, #0x0001
      000094 17 01            [ 2]  204 	ldw	(0x01, sp), y
      000096 4D               [ 1]  205 	tnz	a
      000097 27 07            [ 1]  206 	jreq	00155$
      000099                        207 00154$:
      000099 08 02            [ 1]  208 	sll	(0x02, sp)
      00009B 09 01            [ 1]  209 	rlc	(0x01, sp)
      00009D 4A               [ 1]  210 	dec	a
      00009E 26 F9            [ 1]  211 	jrne	00154$
      0000A0                        212 00155$:
      0000A0 7B 0A            [ 1]  213 	ld	a, (0x0a, sp)
      0000A2 0F 03            [ 1]  214 	clr	(0x03, sp)
      0000A4 14 02            [ 1]  215 	and	a, (0x02, sp)
      0000A6 6B 06            [ 1]  216 	ld	(0x06, sp), a
      0000A8 7B 03            [ 1]  217 	ld	a, (0x03, sp)
      0000AA 14 01            [ 1]  218 	and	a, (0x01, sp)
      0000AC 6B 05            [ 1]  219 	ld	(0x05, sp), a
      0000AE 16 05            [ 2]  220 	ldw	y, (0x05, sp)
      0000B0 27 08            [ 1]  221 	jreq	00106$
      0000B2 9E               [ 1]  222 	ld	a, xh
      0000B3 AA 08            [ 1]  223 	or	a, #0x08
      0000B5 C7 50 00         [ 1]  224 	ld	0x5000, a
      0000B8 20 06            [ 2]  225 	jra	00107$
      0000BA                        226 00106$:
                                    227 ;	test.c: 27: else                   PA_ODR &= ~(1 << 3);
      0000BA 9E               [ 1]  228 	ld	a, xh
      0000BB A4 F7            [ 1]  229 	and	a, #0xf7
      0000BD C7 50 00         [ 1]  230 	ld	0x5000, a
      0000C0                        231 00107$:
                                    232 ;	test.c: 28: PA_ODR |= (1 << 1); PA_ODR &= ~(1 << 1);
      0000C0 72 12 50 00      [ 1]  233 	bset	0x5000, #1
      0000C4 72 13 50 00      [ 1]  234 	bres	0x5000, #1
                                    235 ;	test.c: 25: for (int8_t i = 7; i >= 0; i--) {
      0000C8 5A               [ 2]  236 	decw	x
      0000C9 20 BC            [ 2]  237 	jra	00113$
      0000CB                        238 00108$:
                                    239 ;	test.c: 32: PA_ODR |= (1 << 2);
      0000CB 9E               [ 1]  240 	ld	a, xh
      0000CC AA 04            [ 1]  241 	or	a, #0x04
      0000CE C7 50 00         [ 1]  242 	ld	0x5000, a
                                    243 ;	test.c: 33: PA_ODR &= ~(1 << 2);
      0000D1 72 15 50 00      [ 1]  244 	bres	0x5000, #2
                                    245 ;	test.c: 34: }
      0000D5 5B 07            [ 2]  246 	addw	sp, #7
      0000D7 85               [ 2]  247 	popw	x
      0000D8 84               [ 1]  248 	pop	a
      0000D9 FC               [ 2]  249 	jp	(x)
                                    250 ;	test.c: 38: void main(void) {
                                    251 ;	-----------------------------------------
                                    252 ;	 function main
                                    253 ;	-----------------------------------------
      0000DA                        254 _main:
                                    255 ;	test.c: 39: shift_register_init();
      0000DA CDr00r23         [ 4]  256 	call	_shift_register_init
                                    257 ;	test.c: 41: while (1) {
      0000DD                        258 00102$:
                                    259 ;	test.c: 42: shift_register_send(0b11111111, 0b11101111); // Affiche "8" sur DS4
      0000DD 4B EF            [ 1]  260 	push	#0xef
      0000DF A6 FF            [ 1]  261 	ld	a, #0xff
      0000E1 CDr00r3C         [ 4]  262 	call	_shift_register_send
                                    263 ;	test.c: 43: delay_ms(2000);
      0000E4 AE 07 D0         [ 2]  264 	ldw	x, #0x07d0
      0000E7 CDr00r00         [ 4]  265 	call	_delay_ms
                                    266 ;	test.c: 44: shift_register_send(0b11111111, 0b11110111);
      0000EA 4B F7            [ 1]  267 	push	#0xf7
      0000EC A6 FF            [ 1]  268 	ld	a, #0xff
      0000EE CDr00r3C         [ 4]  269 	call	_shift_register_send
                                    270 ;	test.c: 45: delay_ms(2000);
      0000F1 AE 07 D0         [ 2]  271 	ldw	x, #0x07d0
      0000F4 CDr00r00         [ 4]  272 	call	_delay_ms
                                    273 ;	test.c: 46: shift_register_send(0b11111111, 0b11111011);
      0000F7 4B FB            [ 1]  274 	push	#0xfb
      0000F9 A6 FF            [ 1]  275 	ld	a, #0xff
      0000FB CDr00r3C         [ 4]  276 	call	_shift_register_send
                                    277 ;	test.c: 47: delay_ms(2000);
      0000FE AE 07 D0         [ 2]  278 	ldw	x, #0x07d0
      000101 CDr00r00         [ 4]  279 	call	_delay_ms
                                    280 ;	test.c: 48: shift_register_send(0b11111111, 0b11111101);
      000104 4B FD            [ 1]  281 	push	#0xfd
      000106 A6 FF            [ 1]  282 	ld	a, #0xff
      000108 CDr00r3C         [ 4]  283 	call	_shift_register_send
                                    284 ;	test.c: 49: delay_ms(2000);
      00010B AE 07 D0         [ 2]  285 	ldw	x, #0x07d0
      00010E CDr00r00         [ 4]  286 	call	_delay_ms
      000111 20 CA            [ 2]  287 	jra	00102$
                                    288 ;	test.c: 52: }
      000113 81               [ 4]  289 	ret
                                    290 	.area CODE
                                    291 	.area CONST
                                    292 	.area INITIALIZER
                                    293 	.area CABS (ABS)

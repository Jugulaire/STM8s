                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module ext_interrupt_deep_sleep
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _button_handler
                                     13 	.globl _uart_read
                                     14 	.globl _uart_write
                                     15 	.globl _uart_config
                                     16 	.globl _puts
                                     17 	.globl _wake_pending
                                     18 	.globl _last_press_time
                                     19 	.globl _putchar
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DATA
      000000                         24 _button_handler_now_65536_22:
      000000                         25 	.ds 4
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area INITIALIZED
      000000                         30 _last_press_time::
      000000                         31 	.ds 4
      000004                         32 _wake_pending::
      000004                         33 	.ds 1
                                     34 ;--------------------------------------------------------
                                     35 ; Stack segment in internal ram
                                     36 ;--------------------------------------------------------
                                     37 	.area	SSEG
      000000                         38 __start__stack:
      000000                         39 	.ds	1
                                     40 
                                     41 ;--------------------------------------------------------
                                     42 ; absolute external ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DABS (ABS)
                                     45 
                                     46 ; default segment ordering for linker
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area CONST
                                     51 	.area INITIALIZER
                                     52 	.area CODE
                                     53 
                                     54 ;--------------------------------------------------------
                                     55 ; interrupt vector
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
      000000                         58 __interrupt_vect:
      000000 82v00u00u00             59 	int s_GSINIT ; reset
      000004 82 00 00 00             60 	int 0x000000 ; trap
      000008 82 00 00 00             61 	int 0x000000 ; int0
      00000C 82 00 00 00             62 	int 0x000000 ; int1
      000010 82 00 00 00             63 	int 0x000000 ; int2
      000014 82v00u00u82             64 	int _button_handler ; int3
                                     65 ;--------------------------------------------------------
                                     66 ; global & static initialisations
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area GSINIT
                                     70 	.area GSFINAL
                                     71 	.area GSINIT
      000000                         72 __sdcc_init_data:
                                     73 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   74 	ldw x, #l_DATA
      000003 27 07            [ 1]   75 	jreq	00002$
      000005                         76 00001$:
      000005 72 4FuFFuFF      [ 1]   77 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   78 	decw x
      00000A 26 F9            [ 1]   79 	jrne	00001$
      00000C                         80 00002$:
      00000C AEr00r00         [ 2]   81 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   82 	jreq	00004$
      000011                         83 00003$:
      000011 D6uFFuFF         [ 1]   84 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   85 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   86 	decw	x
      000018 26 F7            [ 1]   87 	jrne	00003$
      00001A                         88 00004$:
                                     89 ; stm8_genXINIT() end
                                     90 ;	ext_interrupt_deep_sleep.c: 55: static uint32_t now = 0;
      00001A 5F               [ 1]   91 	clrw	x
      00001B CFu00u02         [ 2]   92 	ldw	_button_handler_now_65536_22+2, x
      00001E CFu00u00         [ 2]   93 	ldw	_button_handler_now_65536_22+0, x
                                     94 	.area GSFINAL
      000000 CCr00r18         [ 2]   95 	jp	__sdcc_program_startup
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME
                                    100 	.area HOME
      000018                        101 __sdcc_program_startup:
      000018 CCr00rD6         [ 2]  102 	jp	_main
                                    103 ;	return from main will return to caller
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CODE
                                    108 ;	ext_interrupt_deep_sleep.c: 9: void uart_config() {
                                    109 ;	-----------------------------------------
                                    110 ;	 function uart_config
                                    111 ;	-----------------------------------------
      000000                        112 _uart_config:
                                    113 ;	ext_interrupt_deep_sleep.c: 10: CLK_CKDIVR = 0x00; // force 16 mhz 
      000000 35 00 50 C6      [ 1]  114 	mov	0x50c6+0, #0x00
                                    115 ;	ext_interrupt_deep_sleep.c: 18: uint8_t brr1 = (usartdiv >> 4) & 0xFF;               // Bits 11:4
      000004 A6 68            [ 1]  116 	ld	a, #0x68
      000006 97               [ 1]  117 	ld	xl, a
                                    118 ;	ext_interrupt_deep_sleep.c: 19: uint8_t brr2 = ((usartdiv & 0x0F)) | ((usartdiv >> 8) & 0xF0);  // Bits 3:0 + Bits 11:8
      000007 A6 83            [ 1]  119 	ld	a, #0x83
      000009 A4 0F            [ 1]  120 	and	a, #0x0f
                                    121 ;	ext_interrupt_deep_sleep.c: 21: UART1_BRR1 = brr1;
      00000B 90 AE 52 32      [ 2]  122 	ldw	y, #0x5232
      00000F 88               [ 1]  123 	push	a
      000010 9F               [ 1]  124 	ld	a, xl
      000011 90 F7            [ 1]  125 	ld	(y), a
      000013 84               [ 1]  126 	pop	a
                                    127 ;	ext_interrupt_deep_sleep.c: 22: UART1_BRR2 = brr2;
      000014 C7 52 33         [ 1]  128 	ld	0x5233, a
                                    129 ;	ext_interrupt_deep_sleep.c: 23: UART1_CR1 = 0x00;    // 8 data bits, no parity
      000017 35 00 52 34      [ 1]  130 	mov	0x5234+0, #0x00
                                    131 ;	ext_interrupt_deep_sleep.c: 24: UART1_CR3 = 0x00;    // 1 stop bit
      00001B 35 00 52 36      [ 1]  132 	mov	0x5236+0, #0x00
                                    133 ;	ext_interrupt_deep_sleep.c: 25: UART1_CR2 = (1 << UART1_CR2_TEN) | (1 << UART1_CR2_REN); // active RX et TX
      00001F 35 0C 52 35      [ 1]  134 	mov	0x5235+0, #0x0c
                                    135 ;	ext_interrupt_deep_sleep.c: 27: (void)UART1_SR;
      000023 C6 52 30         [ 1]  136 	ld	a, 0x5230
                                    137 ;	ext_interrupt_deep_sleep.c: 28: (void)UART1_DR;
      000026 C6 52 31         [ 1]  138 	ld	a, 0x5231
                                    139 ;	ext_interrupt_deep_sleep.c: 29: }
      000029 81               [ 4]  140 	ret
                                    141 ;	ext_interrupt_deep_sleep.c: 31: void uart_write(uint8_t data) {
                                    142 ;	-----------------------------------------
                                    143 ;	 function uart_write
                                    144 ;	-----------------------------------------
      00002A                        145 _uart_write:
                                    146 ;	ext_interrupt_deep_sleep.c: 32: UART1_DR = data;
      00002A C7 52 31         [ 1]  147 	ld	0x5231, a
                                    148 ;	ext_interrupt_deep_sleep.c: 33: PB_ODR &= ~(1 << 5);  // LED OFF
      00002D 72 1B 50 05      [ 1]  149 	bres	0x5005, #5
                                    150 ;	ext_interrupt_deep_sleep.c: 34: while (!(UART1_SR & (1 << UART1_SR_TC)));
      000031                        151 00101$:
      000031 72 0D 52 30 FB   [ 2]  152 	btjf	0x5230, #6, 00101$
                                    153 ;	ext_interrupt_deep_sleep.c: 35: PB_ODR |= (1 << 5);   // LED ON
      000036 72 1A 50 05      [ 1]  154 	bset	0x5005, #5
                                    155 ;	ext_interrupt_deep_sleep.c: 36: }
      00003A 81               [ 4]  156 	ret
                                    157 ;	ext_interrupt_deep_sleep.c: 38: uint8_t uart_read() {
                                    158 ;	-----------------------------------------
                                    159 ;	 function uart_read
                                    160 ;	-----------------------------------------
      00003B                        161 _uart_read:
                                    162 ;	ext_interrupt_deep_sleep.c: 39: while (!(UART1_SR & (1 << UART1_SR_RXNE)));
      00003B                        163 00101$:
      00003B 72 0B 52 30 FB   [ 2]  164 	btjf	0x5230, #5, 00101$
                                    165 ;	ext_interrupt_deep_sleep.c: 40: return UART1_DR;
      000040 C6 52 31         [ 1]  166 	ld	a, 0x5231
                                    167 ;	ext_interrupt_deep_sleep.c: 41: }
      000043 81               [ 4]  168 	ret
                                    169 ;	ext_interrupt_deep_sleep.c: 43: int putchar(int c) {
                                    170 ;	-----------------------------------------
                                    171 ;	 function putchar
                                    172 ;	-----------------------------------------
      000044                        173 _putchar:
      000044 9F               [ 1]  174 	ld	a, xl
                                    175 ;	ext_interrupt_deep_sleep.c: 44: uart_write(c);
      000045 CDr00r2A         [ 4]  176 	call	_uart_write
                                    177 ;	ext_interrupt_deep_sleep.c: 45: return 0;
      000048 5F               [ 1]  178 	clrw	x
                                    179 ;	ext_interrupt_deep_sleep.c: 46: }
      000049 81               [ 4]  180 	ret
                                    181 ;	ext_interrupt_deep_sleep.c: 48: static inline void delay_ms(uint16_t ms) {
                                    182 ;	-----------------------------------------
                                    183 ;	 function delay_ms
                                    184 ;	-----------------------------------------
      00004A                        185 _delay_ms:
      00004A 52 0A            [ 2]  186 	sub	sp, #10
      00004C 1F 05            [ 2]  187 	ldw	(0x05, sp), x
                                    188 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      00004E 5F               [ 1]  189 	clrw	x
      00004F 1F 09            [ 2]  190 	ldw	(0x09, sp), x
      000051 1F 07            [ 2]  191 	ldw	(0x07, sp), x
      000053                        192 00103$:
      000053 1E 05            [ 2]  193 	ldw	x, (0x05, sp)
      000055 89               [ 2]  194 	pushw	x
      000056 AE 03 78         [ 2]  195 	ldw	x, #0x0378
      000059 CDr00r00         [ 4]  196 	call	___muluint2ulong
      00005C 5B 02            [ 2]  197 	addw	sp, #2
      00005E 1F 03            [ 2]  198 	ldw	(0x03, sp), x
      000060 17 01            [ 2]  199 	ldw	(0x01, sp), y
      000062 1E 09            [ 2]  200 	ldw	x, (0x09, sp)
      000064 13 03            [ 2]  201 	cpw	x, (0x03, sp)
      000066 7B 08            [ 1]  202 	ld	a, (0x08, sp)
      000068 12 02            [ 1]  203 	sbc	a, (0x02, sp)
      00006A 7B 07            [ 1]  204 	ld	a, (0x07, sp)
      00006C 12 01            [ 1]  205 	sbc	a, (0x01, sp)
      00006E 24 0F            [ 1]  206 	jrnc	00105$
                                    207 ;	ext_interrupt_deep_sleep.c: 51: __asm__("nop");
      000070 9D               [ 1]  208 	nop
                                    209 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000071 1E 09            [ 2]  210 	ldw	x, (0x09, sp)
      000073 5C               [ 1]  211 	incw	x
      000074 1F 09            [ 2]  212 	ldw	(0x09, sp), x
      000076 26 DB            [ 1]  213 	jrne	00103$
      000078 1E 07            [ 2]  214 	ldw	x, (0x07, sp)
      00007A 5C               [ 1]  215 	incw	x
      00007B 1F 07            [ 2]  216 	ldw	(0x07, sp), x
      00007D 20 D4            [ 2]  217 	jra	00103$
      00007F                        218 00105$:
                                    219 ;	ext_interrupt_deep_sleep.c: 52: }
      00007F 5B 0A            [ 2]  220 	addw	sp, #10
      000081 81               [ 4]  221 	ret
                                    222 ;	ext_interrupt_deep_sleep.c: 54: void button_handler(void) __interrupt(3) {
                                    223 ;	-----------------------------------------
                                    224 ;	 function button_handler
                                    225 ;	-----------------------------------------
      000082                        226 _button_handler:
      000082 52 04            [ 2]  227 	sub	sp, #4
                                    228 ;	ext_interrupt_deep_sleep.c: 56: now += 1;  // Incrémente à chaque IT, ou via timer en fond si dispo
      000084 CEu00u02         [ 2]  229 	ldw	x, _button_handler_now_65536_22+2
      000087 1C 00 01         [ 2]  230 	addw	x, #0x0001
      00008A 90 CEu00u00      [ 2]  231 	ldw	y, _button_handler_now_65536_22+0
      00008E 24 02            [ 1]  232 	jrnc	00117$
      000090 90 5C            [ 1]  233 	incw	y
      000092                        234 00117$:
      000092 CFu00u02         [ 2]  235 	ldw	_button_handler_now_65536_22+2, x
      000095 90 CFu00u00      [ 2]  236 	ldw	_button_handler_now_65536_22+0, y
                                    237 ;	ext_interrupt_deep_sleep.c: 57: if ((now - last_press_time) > 1) {  // 1 "ticks" d'écart
      000099 CEu00u02         [ 2]  238 	ldw	x, _button_handler_now_65536_22+2
      00009C 72 B0u00u02      [ 2]  239 	subw	x, _last_press_time+2
      0000A0 1F 03            [ 2]  240 	ldw	(0x03, sp), x
      0000A2 C6u00u01         [ 1]  241 	ld	a, _button_handler_now_65536_22+1
      0000A5 C2u00u01         [ 1]  242 	sbc	a, _last_press_time+1
      0000A8 6B 02            [ 1]  243 	ld	(0x02, sp), a
      0000AA C6u00u00         [ 1]  244 	ld	a, _button_handler_now_65536_22+0
      0000AD C2u00u00         [ 1]  245 	sbc	a, _last_press_time+0
      0000B0 6B 01            [ 1]  246 	ld	(0x01, sp), a
      0000B2 5F               [ 1]  247 	clrw	x
      0000B3 5C               [ 1]  248 	incw	x
      0000B4 13 03            [ 2]  249 	cpw	x, (0x03, sp)
      0000B6 4F               [ 1]  250 	clr	a
      0000B7 12 02            [ 1]  251 	sbc	a, (0x02, sp)
      0000B9 4F               [ 1]  252 	clr	a
      0000BA 12 01            [ 1]  253 	sbc	a, (0x01, sp)
      0000BC 24 15            [ 1]  254 	jrnc	00105$
                                    255 ;	ext_interrupt_deep_sleep.c: 58: if (!(PA_IDR & (1 << 3))) {
      0000BE 72 06 50 01 10   [ 2]  256 	btjt	0x5001, #3, 00105$
                                    257 ;	ext_interrupt_deep_sleep.c: 59: wake_pending = 1;  // Juste un flag de réveil
      0000C3 35 01u00u04      [ 1]  258 	mov	_wake_pending+0, #0x01
                                    259 ;	ext_interrupt_deep_sleep.c: 60: last_press_time = now;
      0000C7 CEu00u02         [ 2]  260 	ldw	x, _button_handler_now_65536_22+2
      0000CA CFu00u02         [ 2]  261 	ldw	_last_press_time+2, x
      0000CD CEu00u00         [ 2]  262 	ldw	x, _button_handler_now_65536_22+0
      0000D0 CFu00u00         [ 2]  263 	ldw	_last_press_time+0, x
      0000D3                        264 00105$:
                                    265 ;	ext_interrupt_deep_sleep.c: 63: }
      0000D3 5B 04            [ 2]  266 	addw	sp, #4
      0000D5 80               [11]  267 	iret
                                    268 ;	ext_interrupt_deep_sleep.c: 65: void main() {
                                    269 ;	-----------------------------------------
                                    270 ;	 function main
                                    271 ;	-----------------------------------------
      0000D6                        272 _main:
                                    273 ;	ext_interrupt_deep_sleep.c: 67: uart_config();
      0000D6 CDr00r00         [ 4]  274 	call	_uart_config
                                    275 ;	ext_interrupt_deep_sleep.c: 69: PD_DDR |= (1 << 3);
      0000D9 72 16 50 11      [ 1]  276 	bset	0x5011, #3
                                    277 ;	ext_interrupt_deep_sleep.c: 70: PD_CR1 |= (1 << 3);
      0000DD 72 16 50 12      [ 1]  278 	bset	0x5012, #3
                                    279 ;	ext_interrupt_deep_sleep.c: 71: PD_ODR &= ~(1 << 3);  // LED éteinte
      0000E1 72 17 50 0F      [ 1]  280 	bres	0x500f, #3
                                    281 ;	ext_interrupt_deep_sleep.c: 74: PA_DDR &= ~(1 << 3);   // Entrée
      0000E5 72 17 50 02      [ 1]  282 	bres	0x5002, #3
                                    283 ;	ext_interrupt_deep_sleep.c: 75: PA_CR1 |= (1 << 3);    // Pull-up
      0000E9 72 16 50 03      [ 1]  284 	bset	0x5003, #3
                                    285 ;	ext_interrupt_deep_sleep.c: 76: PA_CR2 |= (1 << 3);    // Active interruption pour PA3
      0000ED C6 50 04         [ 1]  286 	ld	a, 0x5004
      0000F0 AA 08            [ 1]  287 	or	a, #0x08
      0000F2 C7 50 04         [ 1]  288 	ld	0x5004, a
                                    289 ;	ext_interrupt_deep_sleep.c: 79: EXTI_CR1 &= ~(0b11 << 0);   // Efface les bits PAIS[1:0]
      0000F5 C6 50 A0         [ 1]  290 	ld	a, 0x50a0
      0000F8 A4 FC            [ 1]  291 	and	a, #0xfc
      0000FA C7 50 A0         [ 1]  292 	ld	0x50a0, a
                                    293 ;	ext_interrupt_deep_sleep.c: 80: EXTI_CR1 |=  (0b10 << 0);   // Met 10 = front descendant
      0000FD C6 50 A0         [ 1]  294 	ld	a, 0x50a0
      000100 AA 02            [ 1]  295 	or	a, #0x02
      000102 C7 50 A0         [ 1]  296 	ld	0x50a0, a
                                    297 ;	ext_interrupt_deep_sleep.c: 82: __asm__("rim");  // autorise les interruptions
      000105 9A               [ 1]  298 	rim
                                    299 ;	ext_interrupt_deep_sleep.c: 84: while (1) {
      000106                        300 00104$:
                                    301 ;	ext_interrupt_deep_sleep.c: 85: __asm__("halt");  // Va en sommeil
      000106 8E               [10]  302 	halt
                                    303 ;	ext_interrupt_deep_sleep.c: 87: if (wake_pending) {
      000107 72 5Du00u04      [ 1]  304 	tnz	_wake_pending+0
      00010B 27 F9            [ 1]  305 	jreq	00104$
                                    306 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      00010D 90 5F            [ 1]  307 	clrw	y
      00010F 5F               [ 1]  308 	clrw	x
      000110                        309 00111$:
      000110 90 A3 11 58      [ 2]  310 	cpw	y, #0x1158
      000114 9F               [ 1]  311 	ld	a, xl
      000115 A2 00            [ 1]  312 	sbc	a, #0x00
      000117 9E               [ 1]  313 	ld	a, xh
      000118 A2 00            [ 1]  314 	sbc	a, #0x00
      00011A 24 08            [ 1]  315 	jrnc	00107$
                                    316 ;	ext_interrupt_deep_sleep.c: 51: __asm__("nop");
      00011C 9D               [ 1]  317 	nop
                                    318 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      00011D 90 5C            [ 1]  319 	incw	y
      00011F 26 EF            [ 1]  320 	jrne	00111$
      000121 5C               [ 1]  321 	incw	x
      000122 20 EC            [ 2]  322 	jra	00111$
                                    323 ;	ext_interrupt_deep_sleep.c: 88: delay_ms(5); // timer pour un filtre anti rebond
      000124                        324 00107$:
                                    325 ;	ext_interrupt_deep_sleep.c: 89: wake_pending = 0;
      000124 72 5Fu00u04      [ 1]  326 	clr	_wake_pending+0
                                    327 ;	ext_interrupt_deep_sleep.c: 90: PD_ODR |= (1 << 3);  
      000128 72 16 50 0F      [ 1]  328 	bset	0x500f, #3
                                    329 ;	ext_interrupt_deep_sleep.c: 91: printf("Réveillé !\r\n");
      00012C AEr00r00         [ 2]  330 	ldw	x, #(___str_1+0)
      00012F CDr00r00         [ 4]  331 	call	_puts
                                    332 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000132 90 5F            [ 1]  333 	clrw	y
      000134 5F               [ 1]  334 	clrw	x
      000135                        335 00114$:
      000135 90 A3 AD 70      [ 2]  336 	cpw	y, #0xad70
      000139 9F               [ 1]  337 	ld	a, xl
      00013A A2 00            [ 1]  338 	sbc	a, #0x00
      00013C 9E               [ 1]  339 	ld	a, xh
      00013D A2 00            [ 1]  340 	sbc	a, #0x00
      00013F 24 08            [ 1]  341 	jrnc	00109$
                                    342 ;	ext_interrupt_deep_sleep.c: 51: __asm__("nop");
      000141 9D               [ 1]  343 	nop
                                    344 ;	ext_interrupt_deep_sleep.c: 50: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000142 90 5C            [ 1]  345 	incw	y
      000144 26 EF            [ 1]  346 	jrne	00114$
      000146 5C               [ 1]  347 	incw	x
      000147 20 EC            [ 2]  348 	jra	00114$
                                    349 ;	ext_interrupt_deep_sleep.c: 92: delay_ms(50);
      000149                        350 00109$:
                                    351 ;	ext_interrupt_deep_sleep.c: 93: printf("ZZZzzzzzZZZZZzzzzZZZ\r\n");
      000149 AEr00r0E         [ 2]  352 	ldw	x, #(___str_3+0)
      00014C CDr00r00         [ 4]  353 	call	_puts
                                    354 ;	ext_interrupt_deep_sleep.c: 94: PD_ODR &= ~(1 << 3);
      00014F C6 50 0F         [ 1]  355 	ld	a, 0x500f
      000152 A4 F7            [ 1]  356 	and	a, #0xf7
      000154 C7 50 0F         [ 1]  357 	ld	0x500f, a
      000157 20 AD            [ 2]  358 	jra	00104$
                                    359 ;	ext_interrupt_deep_sleep.c: 98: }
      000159 81               [ 4]  360 	ret
                                    361 	.area CODE
                                    362 	.area CONST
                                    363 	.area CONST
      000000                        364 ___str_1:
      000000 52                     365 	.ascii "R"
      000001 C3                     366 	.db 0xc3
      000002 A9                     367 	.db 0xa9
      000003 76 65 69 6C 6C         368 	.ascii "veill"
      000008 C3                     369 	.db 0xc3
      000009 A9                     370 	.db 0xa9
      00000A 20 21                  371 	.ascii " !"
      00000C 0D                     372 	.db 0x0d
      00000D 00                     373 	.db 0x00
                                    374 	.area CODE
                                    375 	.area CONST
      00000E                        376 ___str_3:
      00000E 5A 5A 5A 7A 7A 7A 7A   377 	.ascii "ZZZzzzzzZZZZZzzzzZZZ"
             7A 5A 5A 5A 5A 5A 7A
             7A 7A 7A 5A 5A 5A
      000022 0D                     378 	.db 0x0d
      000023 00                     379 	.db 0x00
                                    380 	.area CODE
                                    381 	.area INITIALIZER
      000000                        382 __xinit__last_press_time:
      000000 00 00 00 00            383 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000004                        384 __xinit__wake_pending:
      000004 00                     385 	.db #0x00	; 0
                                    386 	.area CABS (ABS)
